---
import { getCollection } from "astro:content";
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import Card from "@/components/Card.astro";
import getPostsByGroupCondition from "@/utils/getPostsByGroupCondition";
import { SITE } from "@/config";

// Redirect to 404 page if `showArchives` config is false
if (!SITE.showArchives) {
  return Astro.redirect("/404");
}

const posts = await getCollection("blog", ({ data }) => !data.draft);

const months = [
  "January",
  "February",
  "March",
  "April",
  "May",
  "June",
  "July",
  "August",
  "September",
  "October",
  "November",
  "December",
];
---

<Layout title={`Archives | ${SITE.title}`}>
  <Header />
  <main id="main-content" class="mx-auto w-full max-w-3xl px-4 pb-4">
    <h1 class="text-2xl font-semibold sm:text-3xl mt-8">Archives</h1>
    <p class="mt-2 mb-6 italic">Browse all posts by year and month</p>
    {
      Object.entries(
        getPostsByGroupCondition(posts, (post) =>
          post.data.pubDatetime.getFullYear(),
        ),
      )
        .sort(([yearA], [yearB]) => Number(yearB) - Number(yearA))
        .map(([year, yearGroup]) => (
          <div class="mb-8">
            <h2 class="text-2xl font-bold mb-6 border-b border-accent pb-2">
              {year}
              <sup class="text-sm ml-1">{yearGroup.length}</sup>
            </h2>
            {Object.entries(
              getPostsByGroupCondition(
                yearGroup,
                (post) => post.data.pubDatetime.getMonth() + 1,
              ),
            )
              .sort(([monthA], [monthB]) => Number(monthB) - Number(monthA))
              .map(([month, monthGroup]) => (
                <div class="mt-8">
                  <h3 class="text-xl font-bold mb-4">
                    {months[Number(month) - 1]}
                    <sup class="text-sm ml-1">{monthGroup.length}</sup>
                  </h3>
                  <ul>
                    {monthGroup
                      .sort(
                        (a, b) =>
                          Math.floor(
                            new Date(b.data.pubDatetime).getTime() / 1000,
                          ) -
                          Math.floor(
                            new Date(a.data.pubDatetime).getTime() / 1000,
                          ),
                      )
                      .map((data) => (
                        <Card {...data} />
                      ))}
                  </ul>
                </div>
              ))}
          </div>
        ))
    }
  </main>
  <Footer />
</Layout>
